# Importamos las bibliotecas necesarias
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

##########################################################
# CONFIGURACI√ìN DEL DASHBOARD
##########################################################

# Configuraci√≥n b√°sica de la p√°gina
st.set_page_config(layout='wide', initial_sidebar_state='expanded')
st.title("üìä Dashboard Equipo 23 üõí")
st.markdown("""
Supermarket Sales üëã
* **Luis Ignacio Chac√≥n Cabrera**
            """)

# Configuraci√≥n simple para los gr√°ficos
sns.set_style("whitegrid")

##################################################
# CARGA DE DATOS
##################################################

# Funci√≥n para cargar datos con cache para mejorar rendimiento
# Funci√≥n para cargar datos con cache para mejorar rendimiento
@st.cache_data
def cargar_datos():
    # Carga el archivo CSV con datos macroecon√≥micos
    df = pd.read_csv('data.csv')
    return df
# Cargamos los datos
df = cargar_datos()

##############################################
# CONFIGURACI√ìN DE LA BARRA LATERAL
##############################################

st.sidebar.header('Filtros')

unique_branch = sorted(df["Branch"].unique())
unique_city = sorted(df["City"].unique())
unique_customer = sorted(df["Customer type"].unique())
unique_product = sorted(df["Product line"].unique())
unique_payment = sorted(df["Payment"].unique())

branch = st.sidebar.multiselect('Sucursal', unique_branch, unique_branch)
city = st.sidebar.multiselect('Ciudad', unique_city, unique_city)
customer = st.sidebar.multiselect('Tipo de cliente', unique_customer, unique_customer)
gender = st.sidebar.multiselect('G√©nero', ['Male', 'Female'], ['Male', 'Female'])
product = st.sidebar.multiselect('L√≠nea de producto', unique_product, unique_product)
payment = st.sidebar.multiselect('M√©todo de pago', unique_payment, unique_payment)

# ##################################################
# # FILTRADO DE DATOS
# ##################################################

df_selected_sales = df[(df["Branch"].isin(branch)) 
                        & (df["City"].isin(city)) 
                        & (df["Customer type"].isin(customer)) 
                        & (df["Gender"].isin(gender))
                        & (df["Product line"].isin(product))
                        & (df["Payment"].isin(payment))]

# #######################################################
# # SECCI√ìN DE M√âTRICAS (PRIMERA FILA)
# #######################################################
st.subheader("Indicadores Clave")
col1, col2, col3, col4 = st.columns(4)

# Mostramos las m√©tricas con formato adecuado
col1.metric("Ventas Totales üöÄ", f"${df_selected_sales['Total'].sum():,.1f} ")
col2.metric("Rating promedio ‚≠ê", f"{df_selected_sales['Rating'].mean():.1f}")
col3.metric("Ingreso Bruto Total üìà", f"{df_selected_sales['gross income'].sum():,.1f}")
col4.metric("Total Facturas üìÉ", f"{df_selected_sales['Invoice ID'].count():.0f}")
st.markdown("---")

#########################################################
# SECCI√ìN DE GR√ÅFICOS (SEGUNDA FILA)
#########################################################
st.subheader("Gr√°ficos de Ventas üíπ")
col1, col2= st.columns(2)
# Gr√°fico de ventas por sucursal
with col1:
    fig, ax = plt.subplots()
    sns.countplot(data=df_selected_sales, x="Branch", palette="Set2", ax=ax)
    ax.set_title("Ventas por Sucursal")
    ax.set_xlabel("Sucursal")
    ax.set_ylabel("N√∫mero de Ventas")
    st.pyplot(fig)
    st.write("*Este gr√°fico compara el 'N√∫mero de Ventas' entre las diferentes sucursales. Cada barra representa una sucursal y su altura indica el n√∫mero de ventas.*")
# Gr√°fico de ventas por m√©todo de pago
with col2:
    fig, ax = plt.subplots()
    sns.countplot(data=df_selected_sales, x="Payment", palette="Set2", ax=ax)
    ax.set_title("Ventas por M√©todo de Pago")
    ax.set_xlabel("M√©todo de Pago")
    ax.set_ylabel("N√∫mero de Ventas")
    st.pyplot(fig)
    st.write("*Este gr√°fico compara el 'N√∫mero de Ventas' seg√∫n los diferentes m√©todos de pago: Cash, Credit card y Ewallet. Cada barra representa un m√©todo de pago y su altura indica el n√∫mero de ventas realizadas con ese m√©todo.*")

col3, col4 = st.columns(2)
# Gr√°fico de ventas por l√≠nea de producto
with col3:
    fig, ax = plt.subplots()
    sns.countplot(data=df_selected_sales, x="Product line", palette="Set2", ax=ax)
    ax.set_title("Ventas por L√≠nea de Producto")
    ax.set_xlabel("L√≠nea de Producto")
    ax.set_ylabel("N√∫mero de Ventas")
    plt.xticks(rotation=45)
    st.pyplot(fig)
    st.write("*Este gr√°fico permite comparar el rendimiento de ventas entre las diferentes categor√≠as de productos. Cada barra representa una l√≠nea de producto diferente. La altura de cada barra indica el n√∫mero de ventas correspondiente a esa categor√≠a.*")
# Gr√°fico de ventas por g√©nero
with col4:
    fig, ax = plt.subplots()
    sns.countplot(data=df_selected_sales, x="Gender", palette="Set2", ax=ax)
    ax.set_title("Ventas por G√©nero")
    ax.set_xlabel("G√©nero")
    ax.set_ylabel("N√∫mero de Ventas")
    plt.xticks(rotation=45)
    st.pyplot(fig)
    st.write("*Este gr√°fico compara el n√∫mero de ventas realizadas a clientes femeninos y masculinos. Cada barra representa un g√©nero. La altura de cada barra indica el n√∫mero de ventas realizadas a clientes de ese g√©nero.*")
st.markdown("---")
#########################################################
# SECCI√ìN DE GR√ÅFICOS (TERCERA FILA)
#########################################################
st.subheader("Gr√°ficos de Ventas a lo largo del tiempo üï∞Ô∏è")
col5, col6 = st.columns(2)

import calendar
df_selected_sales['Date']=pd.to_datetime(df['Date'])
df_2 = df_selected_sales.groupby(['Date'])['Total'].sum().reset_index()
df_2 = df_2.sort_values(by='Date', ascending=True)
df_2['Month'] = df_2['Date'].dt.month.apply(lambda x: calendar.month_abbr[x])
df_2['Day'] = df_2['Date'].dt.day
df_2 = df_2.pivot(index="Day", columns="Month", values="Total")
# Gr√°fico de ventas por mes
with col5:
    fig, ax = plt.subplots()
    sns.lineplot(data=df_2, color= "blue", linewidth=2.5,marker='o', markersize=7, ax=ax) 
    ax.set(title="Ventas totales a lo largo del tiempo",xlabel="D√≠a", ylabel="Ventas Totales")
    st.pyplot(fig)
    st.write("*Este gr√°fico de l√≠neas permite comparar la tendencia de las ventas totales a lo largo de los d√≠as de tres meses consecutivos: enero, febrero y marzo. El gr√°fico presenta tres l√≠neas diferentes, cada una representando un mes distinto.*")
#########################################################
# SECCI√ìN DE GR√ÅFICOS (CUARTA FILA)
#########################################################
st.subheader("Tabla de Datos üìâ")
if st.button('Presiona aqu√≠ para desplegar Tabla de Datos üìâ'):
    df_selected_sales = df[(df["Branch"].isin(branch)) 
                        & (df["City"].isin(city)) 
                        & (df["Customer type"].isin(customer)) 
                        & (df["Gender"].isin(gender))
                        & (df["Product line"].isin(product))
                        & (df["Payment"].isin(payment))]
    st.write(df_selected_sales)
    st.write("*Esta tabla proporciona una vista granular de los datos que alimentan el panel de control. Cada fila representa una transacci√≥n individual, lo que permite un an√°lisis detallado de las ventas.*")   
# Pie de p√°gina simple
st.markdown("---")
st.caption("Dashboard Equipo 23 | Datos: data.csv")
